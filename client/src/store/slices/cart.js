import { createSlice } from "@reduxjs/toolkit";
import { updateCart } from "../../utils/cartutils";

const initialState = localStorage.getItem("cart")
  ? JSON.parse(localStorage.getItem("cart"))
  : { cartItems: [], shippingAddress: {}, paymentMethod: "PayPal" };

// Define the cartSlice using createSlice from Redux Toolkit
const cartSlice = createSlice({
  name: "cart",
  initialState,
  reducers: {
    // Reducer for adding items to the cart
    addToCart: (state, action) => {
      const item = action.payload;

      // check item exits in cart
      const existItem = state.cartItems.find((x) => x._id === item._id);

      if (existItem) {
        // If the item already exists in the cart, update its quantity
        state.cartItems = state.cartItems.map((x) =>
          x._id === existItem._id ? item : x
        );
      } else {
        // If the item is new, add it to the cart
        state.cartItems = [...state.cartItems, item];
      }

      // Call the updateCart utility function to perform additional operations
      return updateCart(state, item);
    },

    // Reducer for removing items from the cart
    removeFromCart: (state, action) => {
      // Filter out the item to be removed from the cart
      state.cartItems = state.cartItems.filter((x) => x._id !== action.payload);

      // Call the updateCart utility function to perform additional operations
      return updateCart(state);
    },

    // Reducer for saving the shipping address
    saveShippingAddress: (state, action) => {
      state.shippingAddress = action.payload;
      localStorage.setItem("cart", JSON.stringify(state));
    },

    // Reducer for saving the payment method
    savePaymentMethod: (state, action) => {
      state.paymentMethod = action.payload;
      localStorage.setItem("cart", JSON.stringify(state));
    },

    // Reducer for clearing cart items
    clearCartItems: (state, action) => {
      state.cartItems = [];
      localStorage.setItem("cart", JSON.stringify(state));
    },
  },
});

// Extract the action creators from the cartSlice
export const {
  addToCart,
  removeFromCart,
  saveShippingAddress,
  savePaymentMethod,
  clearCartItems,
} = cartSlice.actions;

// Export the reducer generated by the cartSlice
export default cartSlice.reducer;
